#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

import THBaseService4CMH
from ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  bool exists(string table, TGet tget, string accessId, string accessKey)'
  print '  TResult get(string table, TGet tget, string accessId, string accessKey)'
  print '   getMultiple(string table,  tgets, string accessId, string accessKey)'
  print '  void put(string table, TPut tput, string accessId, string accessKey)'
  print '  bool checkAndPut(string table, string row, string family, string qualifier, string value, TPut tput, string accessId, string accessKey)'
  print '  void putMultiple(string table,  tputs, string accessId, string accessKey)'
  print '  void deleteSingle(string table, TDelete tdelete, string accessId, string accessKey)'
  print '   deleteMultiple(string table,  tdeletes, string accessId, string accessKey)'
  print '  bool checkAndDelete(string table, string row, string family, string qualifier, string value, TDelete tdelete, string accessId, string accessKey)'
  print '  TResult increment(string table, TIncrement tincrement, string accessId, string accessKey)'
  print '  TResult append(string table, TAppend tappend, string accessId, string accessKey)'
  print '  i32 openScanner(string table, TScan tscan, string accessId, string accessKey)'
  print '   getScannerRows(i32 scannerId, i32 numRows, string accessId, string accessKey)'
  print '  void closeScanner(i32 scannerId, string accessId, string accessKey)'
  print '  void mutateRow(string table, TRowMutations trowMutations, string accessId, string accessKey)'
  print '   getScannerResults(string table, TScan tscan, i32 numRows, string accessId, string accessKey)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = THBaseService4CMH.Client(protocol)
transport.open()

if cmd == 'exists':
  if len(args) != 4:
    print 'exists requires 4 args'
    sys.exit(1)
  pp.pprint(client.exists(args[0],eval(args[1]),args[2],args[3],))

elif cmd == 'get':
  if len(args) != 4:
    print 'get requires 4 args'
    sys.exit(1)
  pp.pprint(client.get(args[0],eval(args[1]),args[2],args[3],))

elif cmd == 'getMultiple':
  if len(args) != 4:
    print 'getMultiple requires 4 args'
    sys.exit(1)
  pp.pprint(client.getMultiple(args[0],eval(args[1]),args[2],args[3],))

elif cmd == 'put':
  if len(args) != 4:
    print 'put requires 4 args'
    sys.exit(1)
  pp.pprint(client.put(args[0],eval(args[1]),args[2],args[3],))

elif cmd == 'checkAndPut':
  if len(args) != 8:
    print 'checkAndPut requires 8 args'
    sys.exit(1)
  pp.pprint(client.checkAndPut(args[0],args[1],args[2],args[3],args[4],eval(args[5]),args[6],args[7],))

elif cmd == 'putMultiple':
  if len(args) != 4:
    print 'putMultiple requires 4 args'
    sys.exit(1)
  pp.pprint(client.putMultiple(args[0],eval(args[1]),args[2],args[3],))

elif cmd == 'deleteSingle':
  if len(args) != 4:
    print 'deleteSingle requires 4 args'
    sys.exit(1)
  pp.pprint(client.deleteSingle(args[0],eval(args[1]),args[2],args[3],))

elif cmd == 'deleteMultiple':
  if len(args) != 4:
    print 'deleteMultiple requires 4 args'
    sys.exit(1)
  pp.pprint(client.deleteMultiple(args[0],eval(args[1]),args[2],args[3],))

elif cmd == 'checkAndDelete':
  if len(args) != 8:
    print 'checkAndDelete requires 8 args'
    sys.exit(1)
  pp.pprint(client.checkAndDelete(args[0],args[1],args[2],args[3],args[4],eval(args[5]),args[6],args[7],))

elif cmd == 'increment':
  if len(args) != 4:
    print 'increment requires 4 args'
    sys.exit(1)
  pp.pprint(client.increment(args[0],eval(args[1]),args[2],args[3],))

elif cmd == 'append':
  if len(args) != 4:
    print 'append requires 4 args'
    sys.exit(1)
  pp.pprint(client.append(args[0],eval(args[1]),args[2],args[3],))

elif cmd == 'openScanner':
  if len(args) != 4:
    print 'openScanner requires 4 args'
    sys.exit(1)
  pp.pprint(client.openScanner(args[0],eval(args[1]),args[2],args[3],))

elif cmd == 'getScannerRows':
  if len(args) != 4:
    print 'getScannerRows requires 4 args'
    sys.exit(1)
  pp.pprint(client.getScannerRows(eval(args[0]),eval(args[1]),args[2],args[3],))

elif cmd == 'closeScanner':
  if len(args) != 3:
    print 'closeScanner requires 3 args'
    sys.exit(1)
  pp.pprint(client.closeScanner(eval(args[0]),args[1],args[2],))

elif cmd == 'mutateRow':
  if len(args) != 4:
    print 'mutateRow requires 4 args'
    sys.exit(1)
  pp.pprint(client.mutateRow(args[0],eval(args[1]),args[2],args[3],))

elif cmd == 'getScannerResults':
  if len(args) != 5:
    print 'getScannerResults requires 5 args'
    sys.exit(1)
  pp.pprint(client.getScannerResults(args[0],eval(args[1]),eval(args[2]),args[3],args[4],))

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
